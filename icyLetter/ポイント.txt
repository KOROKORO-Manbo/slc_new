

/Users/UKONN/Desktop/ページアイデア/template/luana/ のカスタム版
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー

雨効果全体の基本的内容把握
	「//Desktop/ページアイデア/template/luana/luanaポイント.txt」参照				← 全画面効果
	「//Desktop/ページアイデア/codrops/Tutorials/kakiGoori/ポイント.txt」参照	← 特定DOM内効果　かき氷


・とりあえず雨効果だけに固定
	main.js
		#490		this._type = 1				// ←元はランダムにしていたが雨に固定　this._type = _util.random(0, 1);
		#503		this._type = 1

・効果を載せるコンテナ（動的追加）と、それを載せる親要素
	main.js
		#478		// e.LUANA_CLASS.effectViewクラス
					    t.prototype.add = function () {                       // 効果を載せるDOM生成
					      this._parent.append(_util.tag("div", [{         // 動的生成のDOMを親にアペンド：親は当クラスインスタンス生成時に引数に渡された e
					        name: "id",
					        val: this._elmId										// this._elmIdはインスタンス生成時に引数で受け取った ’effect’
					      }]));
						// この効果コンテナ要素を載せる親 _parent は実際のコード内では $("body") が渡されている （#319のところ）

雨効果を画面全体でなく特定のDOM内にしぼる作業
ーーーーーーーーーーーーーーーーーーーーーーー
効果の要素（雨や葉）を載せるコンテナは以下のような改装になっていて、元は fixed の (x,y)=(0,0)で
全画面に展開するようになっていた。それを特定のDOM無いだけに閉じ込めるため main.js 内の各段階の
動的追加のコンテナのCSSのpojitionをHTML内の親だけにいっぱいに広がる瀬底に変更した。
その上で起点となる最初の親の指定を body から特定のDOMに変えている
（ここをbodyに戻せば全画面効果になる）

・親コンテナを既存のDOMに切り替える
	main.js#319
		t = new e.LUANA_CLASS.effectView($("#effectContainer"), "effect");
																				↑ 元はbodyだった
・各コンテナのCSSのpositionの設定
	body
		|--HTML内の div#effectContainer					relative															HTML内のstyle
				|--effectViewクラスのコンテナ				absolute	(x,y)=(0,0) 　100% ✕ 100%		main.js＃485
							|--rainViewクラスのコンテナ		absolute	(x,y)=(0,0) 　100% ✕ 100%		main.js＃738
										|--rainPartsインスタンス 変更なし

さらにこのままだと e.LUANA_CLASS.rainView クラス内の雨粒クラス（e.LUANA_CLASS.rainParts）のインスタンス生成時
配置の横幅を全画面で計算してるので、特定コンテナ要素内で見える雨粒は少ない上に同じような横位置ばかりになる
	↓
そこで計算上の横幅を特定コンテナ要素幅（ここでは２００ｐｘ）に変えて、雨粒の数を少なくした
	#721	this._num = 3;
	#745	s = 200;				// 元は s = e.LUANA.main.ws.w; だった（これはブラウザの全画面を意味する）

雨粒発現の縦横位置調整・・・縦横ともランダムにした
#751		i.add(n * r + _util.range(30), (-300 + Math.abs(_util.range(200))));			// add( ) の第一引数が横位置、もう一方が縦位置（ボトムから300px上げてから乱数分、下で発生させてる）

特定のDOMを親として、その親に画像を配置して効果範囲を厳密に指定する（かき氷 や 氷文字 のケース）
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
・効果範囲の位置調整
		HTMLの様子
			<div class="container">							← これが親で、この背景に氷文字など置く
				<div id="effectContainer"></div>
			</div>
		CSSの指定
			.container {
				position: relative;										親のposition指定は必須
				width: 500px;											背景画像と同じサイズにする
				height: 500px;
				background-image: url('./images/koori.png');	氷文字
			}
			#effectContainer {
				position: absolute;									親の左上基準化のためabsolute指定
				top: 10px;													位置調整
				left: 70px;
				width:410px;											効果範囲調整
				height:400px;											親の背景画像上で効果が発現するようにサイズ調整
				overflow: hidden;
			}
		JavaScriptの指定 main.js
			・雨粒の数の調整		#721	this._num = 3;
			・雨粒インスタンス１つ１つの
			　発現縦横位置指定	#751
			        i = new e.LUANA_CLASS.rainParts(this._elm, n);				// インスタンス生成
			        i.add(n * r + _util.range(200), (-380 + _util.range(300)));	// addの第一引数が横位置、第二が縦位置指定数字
																												// rangeを大きくするとユーティリティーから帰ってくる数字も大きくなる
																												// ばらつきも大きくなる　⇒　見ながら調整する
																												
																												
																												
（参考）
トリガーから効果表示までの流れ（main.js）・・・効果を載せるDOMの呼び出しまでの流れを把握する（#274 の「this._elm = $("#effectLayer")」は関係ない）
ーーーーーーーーーーーーーーーーーーーー
	１．windowのロードイベントで 'main' クラスの setup 関数を実行している
			#368		  $(window).load(function () {  e.LUANA.main = new e.LUANA_CLASS.main;    return e.LUANA.main.setup()  });
	２．main クラスは色んな機能を持た親の baseMain クラスを引数で受け取っているクラス
			#225		e.LUANA_CLASS.main = function (t) {	function n() {	...　}(e.LUANA_CLASS.baseMain);
	３．mainクラス定義では function ｎ という名のFunction型で、prototypeにsetup関数がある（中身はcontentsViewクラスインスタンス生成）
			#235		n.prototype.setup = function () { return this.con = new e.LUANA_CLASS.contentsView
	４．contentsViewクラス定義は function ｔ という名で、コンストラクタ内でメンバの _init( ) 実行し、最後のところで add() 実行する
			#240		e.LUANA_CLASS.contentsView = function () { function t() {	...	init( )	...}
			#271		t.prototype._init = function () {	...	return this.add( ) }
			#306		t.prototype.add = function () {	...			t = new e.LUANA_CLASS.effectView($("body"), "effect");		return t.add( ) 　	← #319
	５．上の add( ) 実行で effectView クラスがインスタンス化された上にメンバのadd( )が実行される
			#453		e.LUANA_CLASS.effectView = function () { function t (e, n) {		// 上記#319のインスタンス時の引数のように、e に$("body")、n に "effect" が入る
			#478	（重要）このaddでアペンドされているdiv要素が実際にページの下端の方に存在している
						    t.prototype.add = function () {
						      this._parent.append(_util.tag("div", [{
						        name: "id",
						        val: this._elmId													// this._elmId = n; 上の引数で受け取っている（中身は "effect" ）
						      }]));
						      this._elm = $("#" + this._elmId);								// div#effect のできあがり
						      this._elm.css({														// この div#effect こそが効果（葉、雨）を載せるDOM 　
						        position: "fixed",
						        top: 0,
						        left: 0,
						        zIndex: 9999
						      });
						      this._type = _util.random(0, 1);
						      return setTimeout(this._startEffect, 1e3)
						    };
		６．上の add( ) の最後で同クラスの_startEffect( ) が呼ばれる		return setTimeout(this._startEffect, 1e3)
				（このタイマー時間が最初の効果発現までの時間になる）
		７．_startEffect( ) 内で雨の効果クラスインスタンス生成 ＆ add( ) メソッド実行			↓ 引数 n の "effect" のこと
			      this._type === 0 ? this._effect = new e.LUANA_CLASS.leafView(this._elm, this._elmId + "_rain") : this._effect = new e.LUANA_CLASS.rainView(this._elm, this._elmId + "_rain");
			      this._effect.add();																			 ↑動的追加効果コンテナの div#effect
		８．雨の効果クラス	e.LUANA_CLASS.leafView = function () {  function t(e, n) {	...		// e は効果コンテナ要素、n は”effect_rain”
				同クラスの add( ) メソッドは雨粒群のコンテナ生成と１粒１粒の雨粒クラスインスタンスを載せる処理をしている
				    t.prototype.add = function () {
				      var t, n, r, i, s;
				      this._parent.append(_util.tag("div", [{		// 雨粒インスタンス群を載せるコンテナ
				        name: "id",
				        val: this._elmId
				      }]));
				      this._elm = $("#" + this._elmId);
				      this._elm.css({
				        position: "absolute",
				        top: 0,
				        left: 0,
				        height: '100%',
				        width: '100%'
				      });
				      s = e.LUANA.main.ws.w;
				      t = e.LUANA.main.ws.h;
				      r = s / this._num;
				      n = 0;
				      while (n < this._num) {								// 雨粒インスタンス群生成
				        i = new e.LUANA_CLASS.rainParts(this._elm, n);
				        i.add(n * r + _util.range(30), -300);
				        this._list.push(i);
				        n++
				      }
				      return e.LUANA.main.addUpdate(this.update)
				    };


実際のページでの展開例

<div id="effect" style="position: absolute; top: 0px; left: 0px; width: 100%; height: 100%; z-index: 9999;">
	<div id="effect_rain" style="position: fixed; top: 0px; left: 0px;">
		<div id="effectRain0" style="position: absolute; top: -300px; left: 18px; transform: translate3d(0px, 495px, 0px);">
			<img src="./images/rain3.png" id="effectRain0_img" style="position: absolute; top: 0px; left: 0px; transform: rotate(-9.20111deg) translate3d(0px, 0px, 0px) scaleX(0.46) scaleY(0.46);">
		</div>
		<div id="effectRain1" style="position: absolute; top: -300px; left: 135px; transform: translate3d(0px, 742.5px, 0px);">
			<img src="./images/rain2.png" id="effectRain1_img" style="position: absolute; top: 0px; left: 0px; transform: rotate(0.199259deg) translate3d(0px, 0px, 0px) scaleX(0.45) scaleY(0.45);"></div><div id="effectRain2" style="position: absolute; top: -300px; left: 298px; transform: translate3d(0px, 976.5px, 0px);"><img src="./images/rain3.png" id="effectRain2_img" style="position: absolute; top: 0px; left: 0px; transform: rotate(8.23991deg) translate3d(0px, 0px, 0px) scaleX(0.48) scaleY(0.48);"></div><div id="effectRain3" style="position: absolute; top: -300px; left: 458px; transform: translate3d(0px, 39px, 0px);"><img src="./images/rain3.png" id="effectRain3_img" style="position: absolute; top: 0px; left: 0px; transform: rotate(-1.26753deg) translate3d(0px, 0px, 0px) scaleX(0.5) scaleY(0.5);"></div><div id="effectRain4" style="position: absolute; top: -300px; left: 638px;"><img src="./images/rain0.png" id="effectRain4_img" style="position: absolute; top: 0px; left: 0px; transform: rotate(-11.2372deg) translate3d(0px, 0px, 0px) scaleX(0.44) scaleY(0.44);"></div><div id="effectRain5" style="position: absolute; top: -300px; left: 802px;"><img src="./images/rain2.png" id="effectRain5_img" style="position: absolute; top: 0px; left: 0px; transform: rotate(-2deg) translate3d(0px, 0px, 0px) scaleX(0.43) scaleY(0.43);"></div><div id="effectRain6" style="position: absolute; top: -300px; left: 965px; transform: translate3d(0px, 5px, 0px);"><img src="./images/rain2.png" id="effectRain6_img" style="position: absolute; top: 0px; left: 0px; transform: rotate(4.20111deg) translate3d(0px, 0px, 0px) scaleX(0.44) scaleY(0.44);"></div></div></div>
				・・・・
