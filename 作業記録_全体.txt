
いろいろフォルダはあるが、実際、完成順は、project JQMobile版⇒　project_slidePro&非WebPack_all.jsバンドル版⇒　project_webpack⇒　project_webpackReMake　となっている
全体を通してのページ構成の変更や追加はここについかしていく。

（注意：コード編集→バンドル→./build/ の検証とすすめるが、HTMLファイルの変更はWebPackのバンドル対象にしていないので
　　　　DOMなどの追加があった場合は手動で./build/ のindex.htmlにミニ化された状態で追加すること）
５６．elevitのボタンを"./images/elevit.pdf"から”https://www.elevit.jp/”に変更20190723
５５．TopBtn追加・・・作業内容は「menuTest ブランチ」を参照のこと← cherry-pickは素材追加のコミットのみにすること
			cherry-pickをやるとすれば以下の2つのコミットを順に下からやるのだが、各ブランチの./build/index.html と ./src/css/style.css の内容が完全に共通でないので
			競合が発生し、入力側のmenuTest ブランチで上書きしてしまうと、各ブランチの効果などが素の状態になってしまうので、下の素材画像追加だけのコミットはcherry-pickし
			HTML、CSS、JavaScriptの変更についてはmenuTest ブランチの作業記録ファイルを開いておいて、それに従って、それぞれのブランチで作業するしかない
			
				commit 6b41450e69fc0cc05b9f7aaef9a4587679ca3bf5 (HEAD -> menuTest)Author: KOROKORO <pingping_hiromi@yahoo.co.jp>Date:   Mon Dec 10 13:38:26 2018 +0900
    				add BTN for van
				commit 84488efdf02fb2cd7294b6d8677a9d71a779c3d0Author: KOROKORO <pingping_hiromi@yahoo.co.jp>Date:   Sat Dec 8 13:32:46 2018 +0900
    				add topBtn material
    				
５４．緊急告知　pop-noticeブランチ・・・キリンのモーダルの画像差し替え（詳細はブランチ内の作業記録）

５３．./css/pretty_index.css から pretty_font.css の記述を除外した　2018/10/28
			FireFoxでこのファイルからの外部フォントファイルの読込が安全でないのでブロックと表示されてしまうので除外しbundleに含めないようにした。
			これらは院内食や院内の様子のスライド用のもので、PrettyPhotoの閉じるボタンはBase64としてbundleに組み込まれてるので、他のフォントは不要
			masterブランチでの変更のコミットハッシュは「5905de2」・・・まだ全部ランチにcherry−pickしていない

５２．SSLで、ブラウザの鍵マークのところで「一部安全でない（画像など）」と表示されるのは、
		   ./build/index.html 内にまだhttp://slc-mie.comが残っているからで、
		   置き換え検索で ”http://slc-mie.com” ⇒ ”https://slc-mie.com” をやってアップすれば解消される

５１．　最初のローダー（プログレスバー）の完了直後になにか実行したいときのタイミングは main.js#274 で ”// alert("完了！");” がおいてあるところがベスト

５０．	Xmas版のみだが、Edge では最初のモーダル画面のチェック部分で（main.js#190）エラーが出てその先に行かなくなったので、対応のために以下のように変更
				//main.js#190( 20180808 )
					      if (!window.localStorage) {                              // ルーレットメニュー説明モーダル表示
					          return;
					      }else{
					        var t = window.localStorage.getItem("todo-first20170319");
					        if (t === null || t=== 'true') {                      	//初回またはチェック無しで表示
					          $('.modal-window').show();
					        } else {
					          $('.modal-window').hide();
					        }
					      }
					      ↓ ↓ ↓ ↓ ↓ ↓ ↓ ↓ ↓ ↓ ↓ ↓ 								
					      
					      $('.modal-window').show();							// localStrageのチェックは不要なので単にモーダルを表示するコマンドのみにした
			

４９．SSL対応手順について
		SSLの対応で、結局のところ ./build/index.html 内のaタグのリンクで、http:// ⇒ https:// のするだけなので
		各ブランチで、その都度、置き換えをやっていくことにする
		（注意）全部を置き換えた後、「小児科学会」と「SMC」だけは http:// に戻すこと
		
４８．$.live( ) is not defined 問題について		2018/06/15		https://qiita.com/seltzer/items/e60c4400e258f4f0d0bd
		   ^^^^^^^^^^^^^^^^^^^^
		   
	　（jQuery 1.9以降で「has no method 'live'」と出たら、 $(document).onを使う）
		動的に生成された要素にイベントを割り当てられる「.live」メソッドは、
		jQuery 1.9からなくなったようです。	代わりに使うのが「$(document).on」というメソッド。
		セレクターは第2パラメーターに指定します
		
			main.js#463
				$('div#access').live('pageshow',function(){ 
					↓
				$(document).on('pageshow','div#access',function(){   　←この変更をしたのは drawerブランチの./src/js/main.js のみ
		
		この部分だけが .live( ) を使っていたので、修正したら、./src/で使うjQueryのバージョンを2.xx以降にしても問題なくなった.
		なのでjQueryのファイルをimportしなくても、npmの最新のjQueryをさらした形でもmain.jsに問題が起こらず行けると思われるが・・・
		しかし、とりあえずjQueryのバージョンはそのままで、各ブランチのmain.jsはそのままで（.live( )を使ったままで）
		ドロワーが必要になって drawer ブランチの変更を既存ブランチにcherry-pickしたら書き換えられるので、そのときまでは drawer内だけにしておく
		
４７．noCブランチの作成手順
		基本的に各ブランチの noC バージョンは通常バージョンを仕上げた後、
		そのブランチから noC を新規作成し以下のように流れる雲を消す作業とする

		./src/
			HTML		#page1 の div.cloud を削除（./buildの方のindex.htmlからも削除）
			CSS			style.css #1010 .cloud と @keyframe 定義削除
			JS			main.js #187 蜘蛛のクリックイベントハンドラ削除
				その後ビルドする

４６．summer 氷文字の追加作業内容はsummerブランチの「作業内容.txt」参照

４５．さくらの中の「けいじばん」回転画像がFireFoxで見えない件
			もともと.kirikabu以下の.sakura下の.keijiban要素のcontentにurlでしていして実際にbase64に変換されFireFoxの開発画面でもロードされているのを確認できたが
			実際の画面には桜の木しか見えず、中で回転しているはずの「けいじばん」の画像が無かったのでしかたなしにdiv.keijibanの中にimgタグを設置して見えるようにした
			回転アニメーション自体は要素を回転させてたので目的通りの動きになった

４４．xmas効果モーダルと降雪効果の作業採用は ./xmasBase/構成と作業.txt を参照

４３．波文字を切り株の代わりに配置（rainySeasonブランチ）
			HTML				div.waveContainerをindex.htmlのdiv.bbs_wrapper配下のaタグ内に置く
			CSS					最後部に .waveContainer の定義を置く
			画像ファイル	fukidasi.pngを./images/配下に設置
			HTML				./build/index.htmlに以下のmini状態の波文字要素セットを div.kirikabu に変えて設置する
										<div class="waveContainer"><svg viewbox="25 10 55 40"><defs><linearGradient id="gradient" x1="0" x2="0" y1="0" y2="1"><stop offset="20%" stop-color="#53aef1"/><stop offset="100%" stop-color="#123752"/></linearGradient><pattern id="wave" x="0" y="-8.0" width="190" height="19.2" patternUnits="userSpaceOnUse"><path id="wavePath" d="M-40 9 Q-30 7 -20 9 T0 9 T20 9 T40 9 T60 9 T80 9 T100 9 T120 9 V20 H-40z" mask="url(#mask)" fill="url(#gradient)"><animateTransform  attributeName="transform" begin="0s" dur="1.5s" type="translate" from="0,0" to="40,0" repeatCount="indefinite" /></path></pattern></defs><text text-anchor="middle" x="50" y="29" font-size="18" fill="url(#wave)"  fill-opacity="0.8">掲示板</text><text text-anchor="middle" x="50" y="29" font-size="18" fill="url(#gradient)" fill-opacity="0.1">掲示板</text></svg></div>
			位置調整			クジラを右上に、パンダとうさぎを右に、像を左にずらす

４２．太陽に雨雲をセットした手順
			HTML（こういうのを./build/ の方に追加し忘れないように）
				太陽のコンテナである div.sunSet の中に雨パーティクル要素と雲画像要素を含んだコンテナ .rainyCloudContainer を置く
				（あくまで雨降パーティクル要素のDOMセットは太陽のコンテナ内で子として置いた）
			CSS
				・太陽コンテナ div.sunSet の位置をスコイ末にあげる
				・CSS最後部に雨雲用CSSセット
			JS
				・main.jsの最後部に雨降りパーティクル要素の動的追加コードをセットする

４１．topBtnsへの項目追加   64f5195
			・ボタンの高さは40pxで作成のこと（.topObi .flip-front、backで40pxに指定しているので）
			・これらボタンおコンテナーは .topBtns で  width:600px; としているが状況に合わせて変更すること
			・フリップダウンの動きはCSSクラスをJSで付与・削除しているので、追加時はそちらもおこなうこと（忘れてて解決に時間がかかったことがあった）

４０．雨効果調整（rainySeasonブランチ）　全体の基本的内容把握＝＞「//Desktop/ページアイデア/template/luana/luanaポイント.txt」参照		← 全画面効果        元はサンプルHPのluanaから全画面効果の部分を抜き出したのがページアイデアのこれで、さらに特定DOMに効果を絞ったのが次のかき氷のもの
																													 「//ページアイデア/codrops/Tutorials/kakiGoori/ポイント.txt」参照			← 特定DOM内効果
			（ポイント点＝効果を載せるDOMがどう生成されているか、効果を雨か葉にしぼる、効果発現の間隔を調整する）

	  ◯雨、葉効果の追加について（SLCプロジェクトにおいての注意）
	  		・LUANAから抜き出し、機能をシンプル化したものの元は右のページアイデア　：		file:///Users/UKONN/Desktop/ページアイデア/template/luana/index.html
	  		・追加手順は以下の１つだけ
	  				HTML			スクリプト内で動的に生成されるので何も要らない　当初右のような要素が必要と勘違いしていた ⇒ <div id="effectLayer"></div>
	  				ライブラリ
									  <script type="text/javascript" src="./js/effect/modernizr.custom.56320.js"></script>
									  <script type="text/javascript" src="./js/effect/jquery.easing.1.3.js"></script>
									  <script type="text/javascript" src="./js/effect/sncjm-min.js"></script>
									  <script type="text/javascript" src="./js/effect/main.js"></script>
			・このSLCプロジェクトにおいての注意
					上記のライブラリ群は、wepack 対策として内容をexportしていたりするので、./src/index.html の方で読み込んでもエラーになるので
					デバッグなどの検証はコード変更後、ビルドして./build/の方で確認すること

		◯雨エフェクトビュー要素管理クラス内の生成＆削除のプロセスの間隔が長く、画面に雨のない時間が長くなるので
			以下のように、一度生成した雨効果セットの要素は削除せずに、各雨粒要素が画面下まで来たら元位置に戻す方法に変えた
			（デッド判定をせずに、デッド該当で元位置に戻す）その時、X軸方向はランダムに変更して、パターンが同じにならないようにした
			main.js#403
			    t.prototype.update = function () {
			      if (this._anm.bY > e.LUANA.main.ws.h + 100) {								// if (this._anm.dead) { return; }　元は、個別に雨粒を見て、デッドの場合、他の雨粒も全部デッドになるまでreturnしていた
			        this._anm.spdY = 0;																			// デッド判定で縦位置とスピードをもとに戻し、
			        this._anm.bY = 0;
			        var maxRange = $(window).width();
			        this._img.css({left: _util.random(-100, maxRange)});						// 横位置はランダムに変更する（対象は雨粒画像のラッパー要素のthis.img）
			        return;
			      }																											// ↑ ここまでが追加した文で、あとの変更は以下のコメントアウトの部分（デッド判定しないようにした）
			      this._float.update();
			      if (++this._anm.cnt >= this._anm.delay) {
			        this._anm.spdY += .3;
			        this._anm.bY += this._anm.spdY;
			        this._elm.css(_util.getVendorCss("transform", _util.translate3d(0, this._anm.bY, 0, this._use3d)));
			        // this._anm.bY > e.LUANA.main.ws.h + 10 && (this._anm.dead = !0)  // 雨粒ごとに画面高さ＋いくつでデッド判定するか
			      }
			      return this._img.css(_util.getVendorCss("transform", _util.rotate(this._anm.r) + " " + _util.translate3d(this._anm.x, this._anm.y) + _util.scaleX(this._anm.s) + " " + _util.scaleY(this._anm.s)))
			    };


		◯ 葉、雨効果のどちらかへの絞込・・・./js/effect/main.js ＃４９８
						・・・
																		// ↓ 元は以下の雨か葉の分岐になる所だがココでは葉のみにした
			      this._effect = new e.LUANA_CLASS.leafView(this._elm, this._elmId + "_leaf");
			      // this._type === 0 ? this._effect = new e.LUANA_CLASS.leafView(this._elm, this._elmId + "_leaf") : this._effect = new e.LUANA_CLASS.rainView(this._elm, this._elmId + "_rain");
			      this._effect.add();
			      return this._effect.onComplete = this._completeEffect
			    };
			    t.prototype._completeEffect = function () {
			      this._type = this._type === 0 ? 1 : 0;     // this._type =  0; ずっと葉っぱにするとき
							・・・											// ただここで絞り込むと最初の一回のエフェクトは雨か葉かどちらががランダムに出るので上記の部分で固定化する


		◯ 花びら（葉効果）の出現位置の調整（元は両サイド配置を中央配置にする）・・・./js/effect/main.js ＃５５０
						・・・
			      s = e.LUANA.main.ws.w/2;			// 基準になる横位置を画面中央にする
			      t = e.LUANA.main.ws.h;
			      i = 70;												// 左右に散らす範囲を％指定する
			      n = 0;
			      while (n < this._num) {
			        o = n % 2 === 0 ? s + i : s - i;		// 画面中央を基準に葉の偶数奇数で左右に散らす

        ◯花びら画像の読み込みについて（葉効果）： ./src/js/effect/main.js
				以下のようにコード内で変数を使って画像ファイルを読み込んでいるのでWebPack内に画像データはバンドルされず、
				デプロイ時にも./images/effect/ フォルダに花びらの画像ファイルをおいてやる必要がある

				#658　r = "./images/effect/leaf" + String(_util.random(0, 5)) + ".png";         // 葉の画像ファイル数


３９．jQueryライブラリのバンドル後、不具合修正
			→ jquery.inview.js
				このライブラリは単にグローバルのjQueryをひろってきて利用している形式で、とくにグローバルにオブジェクト名などの
				名前空間を晒し、メイン側からそれ経由で機能を利用するという形式ではなかったので、単にimportしても機能しなかった
				そこで・・・
				全体を ’ export default () => { ... } ’ で囲って、import myInview from './jquery.inview.min.export.js'として
				index.js 内で myInview( ) と実行し機能を追加した   ^^^^^^^^
				                     ^^^^^^^^^^^
			→その他、JQ用ライブラリによくあるパターン・・・そこにある（はずの）jQueryを取ってきて機能追加するというパターン
				例）jquery.prettynumber.js： 仕様解説＝https://tympanus.net/codrops/2010/01/03/prettynumber-a-jquery-plugin-for-formatting-numbers/
																<div id="number1">1234567123672</div>　→　$("#number2").prettynumber({delimiter : ','});　→　 12,345,622,237,123,672
							(function($) {
								$.fn.prettynumber = function(options) {
									var opts = $.extend({}, $.fn.prettynumber.defaults, options);
									return this.each(function() {
										$this = $(this);
										var o = $.meta ? $.extend({}, opts, $this.data()) : opts;
										var str = $this.html();
										$this.html($this.html().toString().replace(new RegExp("(^\\d{"+($this.html().toString().length%3||-1)+"})(?=\\d{3})"),"$1"+o.delimiter).replace(/(\d{3})(?=\d)/g,"$1"+o.delimiter));
									});
								};
								$.fn.prettynumber.defaults = {
									delimiter       : '.'
								};
							})(jQuery);										← 即時関数の引数にjQueryを渡して中でjQueryのprototypeにメンバを追加している
																						（WebPackなどでバンドルした時、ライブラリがモジュール単位に閉じ込められるので
																							’ jQuery’ が定義されてて、その名の解決ができているか・・・npmインストのjQueryが見えるようにしてあるとかなど）

			以下はrainySeasonブランチのみ
			ーーーーーーーーーーーーーーー
			→Modernizr
						window.Modernizr = function (a, b, c) {
								...
						 }(window, window.document),														#203 元はthisとthis.documentだったのをwindowに変更

			→SNCJM・・・名前空間をグローバルに晒した上で、その中の１つのクラス：SNCJM.util の定義をIIFEで行っている形式
					   export default () => {																			#4 全体をexportで囲った
						  window.SNCJM == undefined && (window.SNCJM = {});				#6 元は先頭のSNCJMに this. 、うしろのSNCJMには何も付いていなかったが、
						  (function () {																					      グローバルに晒すために window. を追加（下記のインスタンスだけ晒せば済むなら不要だが）
						    SNCJM.util = function () {
						    	...
						     }
						   })( );
						   window._util = new SNCJM.util;													#235 元はクラスインスタンス	を ’_util’ に入れてただけだったが、これもグローバルに晒すため  window. を追加
						}
						// end of export

			→index.js
						import './effect/modernizr.custom.56320.js'										export もしていないがimportするだけで中身はロードされる
						import fSNCJM from './effect/sncjm-min.js'
						fSNCJM( )																						exportした無名関数を実行し、中身のクラスインスタンス : window._util を取出している

				グローバルに晒すのではなくモジュールと
				それを使うモジュール間で解決させるパターン・・・グローバルに晒すのではなく、import/exportで2者間のみで受け渡しする形式
				ーーーーーーーーーーーーーーーーーーーーー
					以下の記録を参照！
					//WebPack/WebPack基本/【０重要：WebPackライブラリとスコープ】/ビルド後ライブラリ参照エラー回避例/ビルド後ライブラリ参照エラー回避例.txt

３８．作業記録はmasterブランチだけにした

３７．プロジェクト全体におけるｊQueryについて
			npmでインストールしたjQueryをWebPack.cnfig内でプロジェクト全体に来渡らせるようにしたり、個別にimportしたりして利用しても
			目的通りの動作にならないので ./src/js/ においているjQueryをindex.js内でimportし使っている。
			ただ jQuery.inView のようにjQueryni追加イベントハンドラを追加するような形のライブラリは対象のjQueryが見えないのか
			jQuery本体に追加されず、画面内に入ったとしてもinViewイベント発生せず、その機能も發現しない。
			トライ内容としてはindex.jsやmain.jsにrequire(./jquery.inview.min.js)を置いてみたりしたがダメだったので
			直接、ファイル内容をindex.jsにコピペした

３６．page1のtopのマージン設定　＝　src/css/flip_stetch.css #473
			また./css/index.cssの読み込み順で flip_stetch.css を最後にしないとマージン情報が上書きされてしまうので注意

３５．./src/ の変更があったら必ずビルドして、jquery.inview.min.js のコピペして./build/index.htmlの動作確認して、
		　gitのコミットしてからからチェックアウトすること

３４．季節変更時、対象一覧
				赤ちゃん					//src/img/toTopIcon.png
				うさぎ						//src/calendar/usagi.gif										style.css
				くじら						//src//img/page1/kujira.gif									style.css
				ぞう							//src/img/page1/touinJyouhouOmote.png			style.css
				ぱんだ						<img src="./img/page1/timetableOmote.gif" />	index.html
				蜂								<img src="./img/page1/gairaiTantou_omoteShadow.gif" class="cover" />
				もぐら						//src/img/page1/mogura.gif
				コアラ						//src/img/page1/koara.png
				BBS枠						//src/img/page1/BBS_Waku.png
				切り株						//src/img/page1/kirikabu.png
				外観（表）				//src/img/page1/SLCoutDefau500.png
				外観（裏）				//src/img/page1/SLCoutDefauBack500.png


３２．PrettyPhoto関係の写真モーダルを表示すると（入院食や院内案内）、別セクションに移動してもURL内にハッシュタグが残ったままになり、
		　コンソールでのエラーの原因にもなりかねないので、topに戻るボタンやダイレクトメニューの項目をクリックした時にクリアするコードを追加した
				main.js #68、#102			location.hash = "";

３１．作業時注意
			△inviewライブラリをbundle.jsに追加する時、WebPack部の最終行に１つ改行を入れないとキレイに動作しない
			△リリースモードでの圧縮でbundle.jsを作るとEdgeでお問合せの波がなくなってしまうのでデバッグモード＆ソースマップなしでデプロイすること
			参考：main.jsの先頭の ’var disneyInterval;’ は初期画像先読みのプリローダーライブラリのためのもので必要
			
			[ inview ]	助産師外来ページのスクロール時効果に使っている（初期はRevealというライブラリだったが不具合があったのでこっちに換えた）
			
				./src/main.js#499
				--------------------------
				    $(function() {                                                    /* Page3 助産師外来 jyosannsi */
				    	$('.list-mv03').on('inview', function(event, isInView, visiblePartX, visiblePartY) {
				    		if(isInView){
				    			$(this).stop().addClass('mv03');
				    		}
				    		else{
				    			$(this).stop().removeClass('mv03');
				    		}
				    	});
				    });
				    
				./src/index.js
				-----------------
					import myInview from './jquery.inview.min.export.js'
							...
					myInview()

３０．elvit（妊婦サプリ）のボタンをtopBtnsに追加した（hover効果はツールチップにした）

２９．下の２８までで一通り完成した：ここから修正が入っったときのためにその手順をまとめる
			基本的には開発用のフォルダも最新状態になっていて、ここを修正してall.jsにして、そして最終的にmini化したものをアップしてもい良いのだが
			途中でミスしたりする可能性もあるので、デプロイ用のindex.html、all.js、all.cssを編集して修正し、それを逆に確認の意味で開発用の夫々のファイルに反映させて最新化する方式にする。
			よってデプロイ用のall.jsとall.cssの配置マップを以下にまとめる
			＜all.js配置マップ＞
					１〜						jQuery
					４〜						slider-pro
					８〜						main.js
					15〜						toTopアイコン関連　
					９２〜					ダイレクトメニュー関連
					１１８〜				ルーレット：戻るボタン										[注意：ルーレットは動きはCSSだけでやっておりコマのクリック時の処理だけJSなので関連部分は少ない]
					１２７〜				ルーレット：進むボタン
					１３７〜				ルーレット：アニメ時＆アニメ終了時処理
					１４８					toTopアイコン初期化コマンド
					１５０〜				ルーレットのコマのクリック動作
					１８１〜				当院情報（２ページめへ）のゾウのクリック動作
					１９１〜				流れる雲クリック時動作
					１９４〜				ルーレット操作説明モーダル表示・非表示処理
					２１０〜				プリローダー関連
					３５０〜				$(document).ready(function(){　...		〜＃４９３までページ構成全般
					３５９〜				「次から表示しない」のローカルストレージ処理：＃１９４で見に行くキーと一致していないと効かない
					３７０〜				.topObi_container のフリップ処理
					４４８〜				うさぎボタン（カレンダー表示・非表示）
					４５８〜				SLC外観フリップ
					４６５〜				Googleマップ設定
					４８０〜				sliderProによるカレンダー設定処理
					４９７〜				scrollReveal関連
					７５７					rev3.reveal();	revealさせるDOMを指定（助産師外来）・・・今はrev3という要素１個のみ		<div id="rev-3" class="content__image-wrap content__image-wrap--half">
					７７４〜				frdialogmodal関連（入院食、院内写真の全画面表示用）

			＜all.css配置マップ＞
					１〜２９				フォント、ｈｔｍｌ
					３０〜					ルーレット
												６６〜					ダイレクトメニュー
												１６０〜				星
					４１７〜				モーダル（ルーレット説明）
					４５５〜				topObi
					５４１〜				各ページ定義
					５５５〜				Page1
												５６２〜		背景、各キャララッパー
												５７２〜		太陽
												６１５〜		外観
												６７６〜		Twitter
												７２８〜		診察時間
												７４１〜		外来担当医
												８２６〜		LINE
												８７３〜		混雑状況
												９２０〜		当院情報
												９６０〜		雲
												９７８〜		掲示板
					９９７〜				Page2		当院情報
					１０１２〜			Page3		助産師外来
					１０５４〜			Page4		ミルク紹介
					１０９３〜			Page5		入院時プレゼント
					１１１９〜			Page6		産後プレゼント
					１１５７〜			Page7		入院食
					１２１２〜			Page８	院内様子
					１２５３〜			Page９	アクセス
					１２７０〜			Page１０メール
					１４２６〜			Page１１ドクター紹介
					１５５２〜			ラスト
					１５８０〜			プリローダー
					１６６１〜			カレンダー
												１７７９〜カレンダーラッパー（うさぎ）
					１８０６〜			リンクページポップアップ
					１８４４〜			院内紹介、入院食紹介のモーダル画面(fr-dialogmodal)
					１８７０〜			flip
					２４３０〜			slider-pro（カレンダー）


２９．リンクページボタン設置・・・topBtn('.LinkNavBnr')のマウスオーバーでリンクページ(.LinkNav)ポップアップ= JSによるdisplayの切替
			CSS(all.ss#1804　または　style.css)
					/* --------リンクポップアップ　LinkPopUp--------- */

					.LinkNav { display: none; position: absolute; top: 30px; right: -15px; border: 2px solid #ff6699; background: #fff; list-style: none; padding: 12px 0 15px 22px; width: 590px; -webkit-box-shadow: 10px 10px 5px rgba(0, 0, 0, 0.15); box-shadow: 10px 10px 5px rgba(0, 0, 0, 0.15); z-index: 99; box-sizing: content-box; }

					.LinkNav::after, .LinkNav::before { content: " "; position: absolute; bottom: 100%; left: 522px; border: solid transparent; height: 0; width: 0; pointer-events: none; }

					.LinkNav::after { border-color: rgba(255, 255, 255, 0); border-bottom-color: rgb(167,195,60); border-width: 10px; margin-left: -10px; }

					/*
					    ↑　本来、吹き出しの矢印部分の中の白地を::afterのborderでやっていて、borderを画像を使って草原で埋めたかったがきれいに三角形にならなかったので、
					    　　草原の上に白地が残るより赤線だけになったほうがいいので削除した  border-image: url("bg.png");も使えるのだがきれいな三角形にならなかった
					    		最終的に下線の色を緑にして（ border-bottom-color: rgb(167,195,60); ）三角の内側を塗った形にしている
					*/

					.LinkNav::before { border-color: rgba(245, 43, 2, 0); border-bottom-color: #ff6699; border-width: 13px; margin-left: -13px; }

					.LinkNav li { float: left; width: 272px; margin-right: 22px; padding: 0; }

					/*.LinkNav li:not(:last-child) { border-bottom: 1px solid #e6e6e6;
					}*/
					.LinkNav li a { display: block; position: relative; padding: 12px 8px; color: #04c; text-decoration: none; }

					.LinkNav li a:after { display: block; content: ''; position: absolute; top: 50%; right: 66px; width: 10px; height: 10px; border-top: 2px solid #f9170a; border-right: 2px solid #f9170a; -webkit-transform: rotate(45deg) translate(0, -50%); -ms-transform: rotate(45deg) translate(0, -50%); transform: rotate(45deg) translate(0, -50%); }

					.LinkNav li a:hover { filter: alpha(opacity=70); opacity: 0.7; }

					.LinkNav_icon { display: inline-block; vertical-align: middle; margin: 0; width: 58px; height: 40px; text-align: right; }

					.LinkNav_txt { display: inline-block; vertical-align: middle; margin: 0; width: 194px; height: 40px; }

					.LinkNav__catch { font-size: 0.8rem; color: #636363; }

					.LinkNav__name { font-size: 0.9rem; font-weight: bold; }

					li img{ margin-top: 8px; margin-left: 10px;}

					#fukidashiMenu{
					  background-image: url(../img/topObiBtns/link/linkbg.png);
					}

			JS(main.js#756)
				  $('.LinkNavBnr').mouseover(function(){                            //リンクフリップ
						$('.LinkNav').css("display","block");
					}).mouseout(function(){
						$('.LinkNav').css("display","");
					});

２８．この時点で（201711/18）、カレンダーのカルーセルにjQueryMobileを使っていることが気持ち悪く、なしでもマウスでフリック操作できるｊQuerySlideProに変更した
			不要になったJS：　./calendar/jquery.mobile-1.4.5.min.js、iscroll.js、carousel.js
			新たに入れたJS：	./calendar/jquery.sliderPro.min.js、slider-pro.min.css、（jquery-1.11.3.min.js　これは全体の方のjQueryで代用しているので置いてるだけ）

			△この時点でall.jsとall.cssの中身も不要なものを除き新たなものを入れた
			△ ./src/ の方に元の外部ファイルタグがコメントアウトで残してあるのでall.jsやall.caaへの移植順はそれを参考にする

２７．メール文字化け：CGIそのものをShift-JISで書いていてメインのページ自体はUTF-8を指定しているので送られてきた日本語の文字が化けた
				→　CGIをUTF-8で保存し直してアップ＋念のためhttp://slc-mie.com/cgi-local/mailutf8/mail.cgiにして、元とは別のものにした（開発用、デプロイ用、mini）

２６．mini化：やはり使うツールによってJSもCSSも不具合が出てしまうので下記サイトのものを使う
				http://refresh-sf.com/									またHTMLのオプション指定は上から５つのチェック・ボックスを選択
				http://pengpeng.chips.jp/compressor/			念のため自局にも置いておいた

２５．各ページのpagesContainer要素外にページが出てしまっていたことをたまたまChromeで発見
				→Page7のtable内のdivのとじタグの位置がずれていたため・・・何か変更したら確認していくこと！

			また院内紹介写真リストと入院食リストの位置が背景画面をはみ出していたので
			両ページのul.contentの位置を修正した

２４．ダイレクトメニューの高さが横長ノートなどで下が出てクリックできないので縦を縮めた
			#directMenu ul li:not(:first-child){			/* 先頭は星と被ってはいけないのでそれ以外のliの上との幅を詰める*/
			  margin-top: -10px;
			}

２３．ライブラリと個別関連パーツ：右フォルダ参照＝//Desktop/SLC関連/2017ホームページ改修関連/2017HP変更時３パターン案/CSS Roulette・test1/
			⇒特定のパーツを修正したいときなど、どこから触ればいいかの参考にするための記録
			・ルーレット・・・main.js内とCSS
			・ローダー・・・「animローダーセット：シンプルプリローダー」
			・写真ポップアップ・・・「animポップアップ・混雑状況」
			・TOPバナー内メニュー・・・「animパタン開示アニメサンプル」
			・フリップタイプメニュー・・・「animフリップアニメ・診察時間」
			・カレンダー・・・「animカレンダー」
			・Twitter掲示セット・・・「animTwitter掲示板」
			・LINE・・・「animLINEboard」
			・次回から表示しないボタン・・・「２１．」参照
			・TOPメニュー＋ポップアップ・・・「animポップアップ掲示板：リンク集、サイトマップ」
			・流れる雲・・・CSSアニメ .cloud 　＋　クリックイベントJS

２２．JSの変更は開発用のmain.jsを触って再度、all.jsにする時ミスが有ってはいけないので、
		　mini化前のall.jsのデプロイ用の「main.js」部分を触っていくこと・・・さわったら開発用のmain.jsも変更のこと

２１．「次回から表示しない」ボタンは window.localStorage を使っている（main.js #191と#352）
				・キーの日付は　#1327 と ＃1487,#1489が一致していること確認
				・キーの値はChrome-[Application]-[localStrage] の該当キーの値をダブルクリックで true/false 変更できる

２０．最終デプロイはall.jsとall.cssをmini化してall.bundle.jsとかにすること

１９．トップメニューへのボタン追加はコメントアウトしている元「掲示板ボタン」を再利用すること　
			index.html#1142		◎CSSやJSもそのまま残している　CSSクラス名は 「.topObi_container6」

１８．鈴木先生のご要望で以下変更（kirikabu.png追加、modalPic.png変更、gairaiTntou_uraShadow.png変更）
		・掲示板をもっと目立つようにする	トップメニュー内でなくPage1内に切り株画像として配置（ClickによるBlank呼び出し）
		　　（それにともない外来混雑状況のクジラを画面上部にスライドさせ、トップメニューから掲示板ボタンをコメントアウト）
		・裏返った時の外来担当医表を大きくした（控えの画像が大きかったのでそっちを採用：gairaiTntou_uraShadow.png）
		・初期モーダルのキリンの告知に、中央の星の案内も追加
		・アロマセラピー削除
		・SIDS対策ボタン位置変更


１７．2017/10/18にこのバージョンが再採用になったのでWebPack化しようとしたが、
		　all.jsを使ったバンドルでさえjQuery本体のエラーが出て手間取りそうだったので
		　マニュアルでのバインド（all.js）にすることにした
		・・・なので基本的には開発用で変更したものをデプロイ用に移植して、最終的にmini化してアップする流れで。

１６．topObiのリンクボタンについて
			掲示板などのページ丸ごと表示するページはココに集めているが
			Aタグのtargetを_blankにせず、同ページの切り替えにすると
			jQueryMobileでb.splitとかのメソッドでエラーが発生しページ遷移しないので
			利用手引のリンクも含め「target="_blank"」を追加した

１５．CSSも一つにまとめ./css/all.cssに配置したためall.js内の以下はコメントアウト
			//loadCSS('./css/dialogmodal.css', document.getElementById('loadCSSTarget'));　←これもall.cssに入れたから

１４．main.js#279	１０⇒１５０でスピード

１３．助産師外来のページのReveal効果に必要なJSはmain.jsの最後尾に詰め込んだ
			//scrollReveal関連
				(function(u,r){	・・・ })()

１２．ページ内に<h2>などのタグ関連を置くとページ間に20pxほどの隙間が生まれてしまうので注意

１１．ページの高さ・・・ページ感があまりに近くなるので８８８から９８８に変更し、各ページの位置調整をした（4/18）

１０．カルーセル（page7、page6）
	同じコードを使用しているので２つのページで、カスタム属性aria-controlsが同じ値ではモーダルに違う写真が表示されてしまうので
	page6に関しては６を先頭につける形でダブりを回避した　aria-controls="modal-625"など

９．最初、右のをネタにしてたが組み入れると正常動作せず手間取りそうだったので「/Users/UKONN/Desktop/SPAポイント/SPAページ・テンプレート/テンプレ膨大数20160926収集/写真複数紹介最適html5up-lens/単純レスポンシブレイアウトFrame」
	　単純なモーダル式に変えた「/Users/UKONN/Desktop/SPAポイント/【ツール】小物：プログレスバー、ツールチップ、アコーディオン、タブ、モーダル、セリ出メニュー/dialogmodal/」
	　＜設置＞
		HTML	page7のリスト一つ一つに走査対象用のクラスなどのセットと画像
		CSS		PAGE7のところ
		JS		ページ最後尾に以下
						  <script id="loadCSSTarget">  !function(e){"use strict";var t=function(t,n,o){f・・・（詳細略） </script>
						  <script>
						  	loadCSS('./css/dialogmodal.css',
						    document.getElementById('loadCSSTarget'));	//上記のコード
						  	loadJS('./js/frdialogmodal.min.js', function () {
						  		var dialogmodal = Frdialogmodal();
						  	});
						  </script>

８．ルーレットカバーのイベントについて：意味あるかわからないがとりえず以下のようにしている
	本来、カバーの透過部分に表示されてるルーレットのコマをクリックして、その要素を検出してスクロールする予定だったが
	うまくとれないのでカバーのmouseMoveイベントハンドラはなくし、カバーのクリックイベントでスクロールさせるのではなく
	rouletteそのもののクリックイベントで反応するようにした

	style.css
		.rouletteCover{
			・・・
		  pointer-events: none;		←ルーレットの上にかぶさってるカバーはクリック反応しないようにした

	 main.js
		roulette
		.on( 'click', function( e ) {　←ルーレットそのものにclickイベントを付けた（元はrouletteでなくcoverだった）

		参考）削除したカバーのマウスMoveイベントハンドラ
				    cover
				    .on( 'mousemove', function( e ) {
				      // cover.css( { cursor: 'pointer' } );    全体のcontextのpositionを’fixed’ にしているとelementFromPointではルーレットの下に来ているPageを取ってきてしまいルーレットは取れないのでとりあえずこうした
				      cover.css( { display: 'none' } );
				      // var elem = document.elementFromPoint( e.pageX, e.pageY );
				      cover.css( { display: 'inline' } );
				      if (((e.clientX > 75) && (e.clientX < 310)) && ((e.clientY > 85) && (e.clientY < 200))) {
				        cover.css( { cursor: 'pointer' } );
				      } else {
				        cover.css( { cursor: 'auto' } );
				      }
				      // if ( elem.tagName === 'LI' ) {
				      //   cover.css( { cursor: 'pointer' } );
				      // } else {
				      //   cover.css( { cursor: 'auto' } );
				      // }
				    } )

７．toTopIconについて：元ネタ＝/Users/UKONN/Desktop/コリス/本_JSライブラリ実践活用［厳選111］/UI_Part2/Topへ戻る動的表示/
	本来のライブラリは短いオブジェクト（scrolltotop）のコードだったのでmain.jsの即時関数内に埋め込み
	オブジェクトの初期化関数もその中でおこなっている（　scrolltotop.init();         // 「ページトップへ戻る」初期化）
	toTopIcon表示のDOMはオブジェクト内で生成され、そのCSS定義も中で行われている。
	また実際にこのアイコンがクリックされたらcurrentNumを１にしてルーレットをまわさないといけないので
	元のライブラリのクリックイベントハンドラの中身をそのように変更している

６．z-index
	.modal-window（説明モーダル）					6　ローダーの次に高い位置において置くため
	.star（ルーレット上の星）								４		ルーレットより上になるため
	#CalWrapper（うさぎカレンダー）				４
	#rouletteContainer（ルーレット）					4		page9がスクロールする時、波効果がルーレットの上にならないようにするためz-indexの設定が必要だった
	.wave--front（波効果：上）							２	 	（↑topObiは最初、ルーレットの外においてたが、ルーレットカバー内に入れても問題なかったので入れたので同等のz-indexになってる）
	.wave--back （波効果：下）							１
	.waveContent （メールフォームラッパー ）　２	波効果より上において見えるようにするため（wave--frontより後ろ記述なので同じ２でいい）


５．メニューの戻り位置について
	fixedのルーレットとtopBarがあるので、まともに各ページの先頭にスクロールすると、各ページの上のほうが見えない状態になるので
	メニューによてスクロールさせる時は本来のトップより上に大きく戻って見えるようにした
	topBarの高さは７０pxほどなので８０ｐｘ余分に戻るようにしている
		main.js＃86、#24
          if (target.length) {
            var targetPoint = target.offset().top -80;
            $('html,body').animate({
              scrollTop: targetPoint  //target.offset().top;
            }, 1000);
            return false;
          }

４．透過PNGの下の要素をクリックで反応するようにする
		ツイターの表示枠の画像の透過部分にタイム・ラインを表示しているが、
		その中のコントローラもマウスに反応するように下記の設定をしている

					.timelineCover{
							・・・
					  pointer-events: none;			/* 殆どのブラウザでサポートしてるようになったので使った */
					}

３．うさぎカレンダーとJQmobile
	うさぎカレンダーはJQmobileを使わざるをえないので使っており、その関連の留意事項。
	クリックイベント（うさぎ）が２回発生してしまう件はカレンダーとうさぎのラッパーである
	’CarouselSpace’ に data-role="page" を付与することで回避できた。
	また「うさぎ＋カレンダー部」を足した高さは５０５ｐｘあって、opacityをゼロにしているだけなので
	うさぎを画面の左に寄せて配置すると「もどる、すすむ」ボタンにかかってしまって、ふさぐので注意

２．Page1について			←←←←←←現時点では「５．」での解決に変更している
ーーーーーーーーー
	最初の読込ではページトップにfixedした topObi の高さ（１２０ｐｘ）の下にpage1がくるが、
	別ページからの戻りではその高さは無視され上まで行ってしまって、
	初期画面と戻り画面に位置のズレが大きくなったので、最初から強制的にpage1を一番上まで持ってくるようにした

	//main.js
	$(document).ready(function(){
	  var speed = 300;                                        // ページ読み込み時、fixed要素分をとばしてpage1上辺を(0, 0)位置に持っていく
	  var target = $("#page1");                               // そうしないと最初だけfixed要素分（topObi）、上辺にマージンを残してpage1が下にずれるから
	  var position = target.offset().top;
	  $('body,html').animate({scrollTop:position}, speed, 'swing');
	  			・・・

	また太陽がz-indexをあげてもfixedであるtopObiの下に来るので、それはあまり良く見えないので
	margin-topをtopObiに隠れないようにした
	/* style.css */
		#page1 .sun {
		  width: 164px;
		  height: 163px;
		  margin-top: 60px;
		  		・・・

１．ルーレットについて
ーーーーーーーーーーー
ルーレット改造内容（ルーレット構成は後述）
	ルーレットを画面左上から半分出し停止コマが右斜下の形でfixedにしたかったので、
	ルーレットのコマを停止番号が見える位置に調整することにした。
	このことにより当初、１０を１２時位置の頂点にして右回りに１・２・３・・・となっていたコマを
	右斜め下に１が来るように、配置角度を全部、元角度から時計回りに
	３コマ分（３６度✕３＝１０８度）、回転させた状態にした＝１４４度加算

		style.css
				#roulette li:nth-of-type(1) {																					#roulette li:nth-of-type(10) {
				  background-image: url('./img/p1.png');																  background-image: url('./img/p10.png');
				  -webkit-transform: rotate(144deg);							〜										  -webkit-transform: rotate(468deg);
				          transform: rotate(144deg);																			          transform: rotate(468deg);
				}																															}

	そして回転アニメーションの方は、コマの１０番が見える位置に来るのではなく１が見える位置に来るように
	元の停止角度の数値に１コマ分（３６度）を、全部のコマに加算した





ルーレット構成・・・コマを色から紙背景に替える手順は後述

	UL内のliはルーレットの各コマで、色を表示しているのは li::before の部分。


	◯コマ基本　 li   li::before  li::after
		#roulette li {
		  top: 0;
		  right: 0;
		  left: 0;
		  margin: auto;
		  position: absolute;
		  display: block;
		  width: 100px;
		  height: 154px;
		  -webkit-transform-origin: 50px 154px;
		          transform-origin: 50px 154px;
		}
		#roulette li::before {
		  top: 0;
		  left: 0;
		  position: absolute;
		  display: inline-block;
		  content: "";
		  width: 0;
		  height: 0;
		  border-style: solid;
		  border-width: 154px 50px;
		  z-index: 0;
		}
		#roulette li::after {
		  counter-increment: num;
		  content: counter(num);
		  z-index: 5;
		  position: absolute;
		  display: block;
		  width: 100px;
		  text-align: center;
		  line-height: 40px;
		  font-size: 20px;
		  color: #fff;
		  font-weight: bold;
		}

	◯コマ個別
		#roulette li:nth-of-type(10) {							/* １０コマなので各コマ３６度ずつ回転させてる*/
		  -webkit-transform: rotate(360deg);
		          transform: rotate(360deg);
		}
		#roulette li:nth-of-type(10)::before {
		  border-color: #8fc31f transparent transparent;
		}

	◯回転アニメーション
	　JSによって親要素（ul#roulette）に' number-* ' が付与され
	　該当するクラス（’roulette.number-*’）が園アニメをするようになっている

		#roulette.number-10 {									/* rouletteにnumber-10が付与された時のアニメ */
		  -webkit-animation-name: 'number-10';
		          animation-name: 'number-10';
		}

		@keyframes number-10 {
		  from {
		    -webkit-transform: rotate(0);
		            transform: rotate(0);
		  }
		  to {
		    -webkit-transform: rotate(2880deg);		/* 2880/360＝８ 　８回転させてる*/
		            transform: rotate(2880deg);
		  }
		}

	◯コマの背景を色から画像にする手順
		１）準備：１００✕３０８の透明背景にコマの背景部分だけ紙素材にした画像を用意する
					（この例では'p10.png'）
		２）各コマの::before要素の色を削除
			#roulette li:nth-of-type(10)::before {
			  border-color: transparent transparent;
			}
		３）各コマのli要素背景を指定
			#roulette li:nth-of-type(10) {
			  background-image: url('p10.png');
			  -webkit-transform: rotate(360deg);
			          transform: rotate(360deg);
			}
