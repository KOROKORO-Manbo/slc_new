

ココは主にWebPack化、WebPackReMakeのことだけなのでページ編集については全体の作業記録を参考にすること

ーーーーーーーーー
 ReMakeのポイント
ーーーーーーーーー

	（カレンダー：sliderProはWebPack化でバンドルできた。写真モーダル表示：prettyPhotoもバンドル化済。スクロール時出現効果：JQのinViewは問題ありbundle.jsの最後尾に追加している。frModalは捨てた）
	
	prettyPhoto：
		使用ライブラリの内、WebPack化出来たのはカレンダーの ./calendar/jquery.sliderPro.min.js だけだったので、単体でWebPack化が確認できたライブラリであるprettyPhotoを
		院内案内や入院食案内の写真モーダル用に採用した。（/Users/UKONN/Desktop/SLC関連/2017ホームページ改修関連/2017HP変更時３パターン案/CSS Roulette・test1/animタイル式写真一覧＆モーダル表示（院内食紹介）/prettyPhoto_WebPackProject/）
		よって元のfrModal系のものはJSもCSSも削除し、新たに素の構成（./src/...）として以下のものを加えた
		jquery.prettyPhoto.js、jquery.pretty_main.js、prettyPhoto.css、pretty_font.css、pretty_style.css（←最後のこれはstyle.cssのPage7のところに組み入れた）
		このprettyPhotoはすでにWebPack化出来ているのでここでも組み入れれると思いfrModal系から変えた（frModalはもとはdialogmodal.cssとかを持ったライブラリのようだ）
		
		実際やってみてほとんど上手く行ったが、モーダル表示時の写真周辺の枠や閉じるボタンなどの為の
		 jquery.pretty_main.js の即時関数の実行がタイミング悪いのか枠やボタンが表示されなかったので
		 $(document).ready(function(){ ... } で囲ったらうまくいった
	 
	 
	 scrollReveal→JQinview：
	 	一旦、この効果関連を全部外してバンドルし、助産師外来の画像は素の状態で表示させるようにしてみた		// import './scrollReveal.js'		// require('imports-loader?this=>window!./scrollReveal.js')
	 	 その後いろいろJSファイルの配置位置やjQueryのreadyなどつけたりしたがこれをバンドルしても上手くいかなかった。
	 	 よって当面は外部ファイルとして読込ませようと思っていた。
	 	 ↓↓↓↓
	 	 しかしJQinviewが簡単な構成なのでこれはいけるかと思い./src/で変更して上手くいったがバンドルするとダメで、
	 	 結局こっちのライブラリをbundle.jsの最後尾にコピペする形にした。
	 	（ライブラリのコピペ追加）注意なのはWebPackの部分の最終行のあとに一回、改行を入れないと動作しない
	 										  　     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	 	 ↓↓↓↓
	 	 しかし以下の方法でバンドルしたらうまく動作するようになった
		 	 // index.js
					・・・	 	 
				import myInview from './jquery.inview.min.export.js'
					・・・
				myInview( )

	 main.js
	 	もともと、frModalやscrollRevealなどを入れていない状態の、うさぎのクリックハンドラなどのページのためのコードもバンドルすることにした。
	 	最初、そのままindex.jsに登録しバンドルして./build/で見てみると動作がおかしくDOMが見えていないところがあるようなので
	 	全体を$(document).ready(function(){ ... }で囲って動くようにした
	 	
	 	
	 注意！！（助産師外来の画像効果：解決済）　←（注）ビルドの度にライブラリを手で追加！！
	 ーーーーーーーーーーーーーーーーーーー
	 	バンドルのindex.jsにおいて下記をコメントアウトすると、理由がわからないが「うさぎ」をクリックしてもカレンダーが出なくなるので注意
		（ライブラリ的には全く関係ないので色々確認したが理由はわからず、とりあえず、scrollRevealを使う／使わないにかかわらずこの設定は置いておくこと）
					index.js		require('imports-loader?this=>window!./scrollReveal.js');
		＝カレンダーの jquery.sliderPro.min.js と scrollReveal.js が全く関係ないことは./src/index.htmlの方のscrollRevealをコメントアウトしてもカレンダーが動作することで判る
		   ちなみにカレンダーの scrollReveal.jsライブラリを利用している最終的なコードは main.js の #474 からのコードがそれ。
		この記述を有効にするとコンソールに下記のエラーが出るが特に悪影響はなさそうなので、とりあえずはそのままにしておく
					Uncaught TypeError: Cannot read property 'scrollHeight' of null
					
		↓↓↓↓↓↓↓↓↓ やはりエラーが気持ち悪いのとscrollRevealを完全に止めて同効果の別のもの（jQueryなど）にしたかったので調査したら以下で解決↓↓↓↓↓↓↓
		
		 jquery.sliderPro.min.js と scrollReveal.js が全く関係ないことなので何が影響してるか調べていったら、
		 index.jsにおいて下記のthis指定の部分をコメントアウトしたらカレンダーが出るようになった
		 これで完全にscrollRevealを止めれた		index.js		require('imports-loader?this=>window!./main.js')		 //main.jsへのthis指定のをコメントアウト
		 
		 ↓↓↓↓↓↓↓↓↓ 
					
		ReMakeまででバンドルできなかったのは結局、scrollRevealだけになった・・・また同様の効果のもので別ライブラリをやってみてもいい
		
		↓↓↓↓↓↓↓↓↓ 
		
		[ jQueryInView ] が単純そうで採用。単体でのWebPack化は成功したがプロジェクトではライブラリ自体が機能しなかった
		仕方ないので、バンドルで動作しなくなるのでindex.jsからは除外し、ライブラリ自体をbundle.jsの最後尾のWebPackの外に置いた
		また起動コードである対象DOMの ’ inview ’ ハンドラの設定コードはmain.js最後尾においている
				
		注意！！なのでビルドする度にjQueryInViewライブラリをbundle.jsに追加することを忘れずに
						（ローカルサーバでの確認時はオンザフライのbundle.jsなので当然このライブラリは入っておらずビルド＆追加して確認のこと）

以下はWebPack版での作業内容でReMakeでは上のことと関連するHTML（index.htmlのPage7とPage8をprettyPhotoの書式に変えただけ）

当初の構成
    <script src="./js/jquery.js" charset="utf-8"></script>
    <!-- <script type="text/javascript" src="./calendar/jquery-1.11.3.min.js"></script> -->
    <script type="text/javascript" src="./calendar/jquery.sliderPro.min.js"></script>
    <link rel="stylesheet" href="./css/style.css">
    <link rel="stylesheet" href="./css/flip_stetch.css">
    <link rel="stylesheet" type="text/css" href="./calendar/slider-pro.min.css">
    
    HTML最後尾に・・・
    
    <script src="./js/main.js" charset="utf-8"></script>
    
	↓
この時点での問題点
	カレンダー用のJQは一番上のJQより古いので、GoogleMapのところで使ってる $(...).live()関数がundefinedになっていた。
	この古い方はコメントアウトしていた
	
	↓
最初はCSSからバンドルしていった
	index.js
		import '../css/index.css'
		
	↓
npmモジュールのjQueryを使うつもりで
カレンダー用ライブラリをindex.jsに入れて
webpackを以下のように設定

	index.js
		import '../calendar/jquery.sliderPro.min.js'
		
	webpack.config.js
				・・・
		    new webpack.ProvidePlugin({
		      $: 'jquery',
		      jQuery: 'jquery'
		    }),
				・・・

	↓		
しかしこれでは以下のようなエラーになってしまった
		・Uncaught TypeError: url.indexOf is not a function
		・Uncaught TypeError: $(...).live is not a function

	↓		
npmモジュールのJQのバージョンが古いようなのだ

	↓	
それでnpmモジュールのJQを使うのを止めてJQファイルもindex.jsで読み込むようにした

	index.js
		import '../css/index.css'
		import './jquery.js'
		import '../calendar/jquery.sliderPro.min.js'
		
	webpack.config.js
				・・・
		    // new webpack.ProvidePlugin({				←コメントアウト
		    //   $: 'jquery',
		    //   jQuery: 'jquery'
		    // }),
				・・・

	↓	
いろいろライブラリを詰め込んでるmain.jsをバラして組込んでいくため（まとめたままバンドルしてもエラーになるので）
この中にまとめたライブラリなどを一旦外に出す

	[frdialog]
	→最後尾にあったfrDialogの部分とそのコマンド部を独立したJSファイル（fr_dialog.js）に移動：本当の元ファイルのfrdialogmodal.min[main.js組入済].jsはそのまま放置
	→このライブラリのコマンド部「var dialogmodal = Frdialogmodal();」はとりあえずmain.jsの最後尾＃491においた（ ( function(window) { } )  内）
	　　（この時点でbundle.jsは./build/index.htmlの先頭で、main.jsは最後尾で読み込む形で問題なく動作している）

	[scrollReveal]
	→元参照（//Desktop/SLC関連/2017ホームページ改修関連/2017HP変更時３パターン案/CSS Roulette・test1/animReveal_スクロール位置出現/js/）
		をみてmain.jsから抜き出し部分を確認し、独立ファイル(scrollreveal.js)とした.
	
	[jquery.sliderPro.min.js]
	→これは上の作業ですでにmain.jsからは出していた　./calendar/jquery.sliderPro.min.js
	
この時点でライブラリ関係は皆、外に出して素の環境ができた
	
	このままindex.jsに外に出したライブラリをそのまま順にimportしてビルドしても
	どうもwindow、ひいてはdocumentオブジェクトが取得できなくなってしまったようなので
	npm の Imports Loader をインストールして　require('imports-loader?this=>window!./file')　を使ってみたがダメっぽい
	
そこでまず院内案内や入院食紹介のダイアログのfrDialogについて、main.jsの最後尾の $(document).ready(function(){ ... } に
ライブラリ本体と最後のコマンドを詰め込んだらとりあえず動作するようになった：index.jsでのimport削除

しかし、そのmain.jsをバンドルしたら動作しなくなった

結論＝＞	frDialog と scrollReveal はやはりmain.jsにおいて、main.jsをバンドルせずに./build/のほうでもそのまま読み込ませる
				結局、bundle.js に組み込めたライブラリはCSS関連とカレンダー用の./calendar/jquery.sliderPro.min.js はindex.jsだった。
				またこのような経緯で、./src/index.html は個別に外部ライブラリファイルを読み込んでてmain.jsは最低限のもので
				./build/js/main.js は frDialog と scrollReveal が詰め込んであるので、
				中身が大きく違うので念のため  ./build/js/main.js は ./build/js/mainORG.js としてバックアップをとってある
				また./src/全体は バンドル皆無版src.zip としてバックアップしている。
				ライブラリを全部バラバラにしたこの ./src/ があるので今後、WebPackの研究でなんとか全部、バンドルしたい所だ。


	
	

	